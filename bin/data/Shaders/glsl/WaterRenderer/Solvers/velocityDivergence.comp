#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 8
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = WORKGROUP_SIZE ) in;

#include "simulationData.decl" //binding 0 

layout(binding = 1, rgba32f) uniform image3D velocityImage;
layout(binding = 2, r32f) uniform image3D divergenceImage;

float ComputeVelocityDivergence(/*image3D vectorField, */ivec3 nodeIndex)
{
  vec3 invStep = simulationDataBuf.invStepSize.xyz;
  float divergence = 
    (imageLoad(velocityImage, ClampNode(nodeIndex + ivec3(1, 0, 0))).x - imageLoad(velocityImage, ClampNode(nodeIndex + ivec3(-1, 0, 0))).x) * 0.5f * invStep.x +
    (imageLoad(velocityImage, ClampNode(nodeIndex + ivec3(0, 1, 0))).y - imageLoad(velocityImage, ClampNode(nodeIndex + ivec3(0, -1, 0))).y) * 0.5f * invStep.y +
    (imageLoad(velocityImage, ClampNode(nodeIndex + ivec3(0, 0, 1))).z - imageLoad(velocityImage, ClampNode(nodeIndex + ivec3(0, 0, -1))).z) * 0.5f * invStep.z;
  return divergence;
}

void main() 
{
  ivec3 nodeIndex = ivec3(gl_GlobalInvocationID.xyz);
  float divergence = ComputeVelocityDivergence(nodeIndex);
  imageStore(divergenceImage, nodeIndex, vec4(divergence, 0.0f, 0.0f, 0.0f));
}

