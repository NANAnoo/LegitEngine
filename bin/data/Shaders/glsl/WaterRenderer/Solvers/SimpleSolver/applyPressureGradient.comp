#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 8
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = WORKGROUP_SIZE ) in;

#include "../SimulationData.decl" //binding 0 

layout(binding = 1, r32f) uniform image3D pressureImage;
layout(binding = 2, rgba32f) uniform image3D velocityImage;

vec3 ComputePressureGradient(ivec3 nodeIndex)
{
  vec3 invStepSize = simulationDataBuf.invStepSize.xyz;
  return vec3(
    imageLoad(pressureImage, ClampNode(nodeIndex + ivec3(1, 0, 0))).x - imageLoad(pressureImage, ClampNode(nodeIndex + ivec3(-1, 0, 0))).x,
    imageLoad(pressureImage, ClampNode(nodeIndex + ivec3(0, 1, 0))).x - imageLoad(pressureImage, ClampNode(nodeIndex + ivec3(0, -1, 0))).x,
    imageLoad(pressureImage, ClampNode(nodeIndex + ivec3(0, 0, 1))).x - imageLoad(pressureImage, ClampNode(nodeIndex + ivec3(0, 0, -1))).x
  ) * 0.5f * invStepSize;
}

void main() 
{
  ivec3 nodeIndex = ivec3(gl_GlobalInvocationID.xyz);
  vec3 currVelocity = imageLoad(velocityImage, nodeIndex).xyz;
  imageStore(velocityImage, nodeIndex, vec4(currVelocity - ComputePressureGradient(nodeIndex), 0.0f));
}

